name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs: 
  backend-tests:
    name: Run Backend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1.2'

      - name: Check for backend changes
        id: backend_changes
        run: |
          git diff --exit-code HEAD^ HEAD -- voting-api/
        continue-on-error: true

      - name: Create cache directory
        if: steps.backend_changes.outcome == 'failure'
        run: mkdir -p voting-api/vendor/bundle

      - name: Cache gems
        if: steps.backend_changes.outcome == 'failure'
        uses: actions/cache@v4
        with:
          path: voting-api/vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Install dependencies
        if: steps.backend_changes.outcome == 'failure'
        run: |
          cd voting-api
          gem install bundler
          bundle config set --local deployment 'true'
          bundle config set --local path 'vendor/bundle'
          bundle install --jobs 4 --retry 3

      - name: Setup Database
        if: steps.backend_changes.outcome == 'failure'
        run: |
          cd voting-api
          cp config/database.yml.ci config/database.yml
          RAILS_ENV=test bin/rails db:create db:migrate db:seed db:schema:load

      - name: Start Sidekiq
        if: steps.backend_changes.outcome == 'failure'
        run: |
          cd voting-api
          RAILS_ENV=test bundle exec sidekiq -C config/sidekiq.yml &
          sleep 5
          if ! pgrep -f sidekiq; then
            echo "Sidekiq failed to start"
            exit 1
          fi

      - name: Run RSpec tests
        if: steps.backend_changes.outcome == 'failure'
        run: |
          cd voting-api
          RAILS_ENV=test bundle exec rspec

  frontend-tests:
    name: Run Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Check for frontend changes
        id: frontend_changes
        run: |
          git diff --exit-code HEAD^ HEAD -- frontend/
        continue-on-error: true

      - name: Install frontend dependencies
        if: steps.frontend_changes.outcome == 'failure'
        run: |
          cd frontend
          npm install

      - name: Build frontend
        if: steps.frontend_changes.outcome == 'failure'
        run: |
          cd frontend
          npm run build

      - name: Run frontend tests
        if: steps.frontend_changes.outcome == 'failure'
        run: |
          cd frontend
          npm test
